{"version":3,"sources":["stack.js"],"names":[],"mappings":";;;;;;;;;;;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;AAMA,IAAM,QAAQ,SAAR,KAAQ,CAAC,MAAD,EAAY;AACtB,QAAI,kBAAJ;QACI,qBADJ;QAEI,cAFJ;QAGI,qBAHJ;QAII,cAJJ;;AAMA,gBAAY,qBAAM;AACd,gBAAQ,EAAR;AACA,uBAAe,IAAI,kBAAQ,YAAZ,EAAf;AACA,uBAAe,uBAAf;AACA,gBAAQ,EAAR;AACH,KALD;;AAOA;;;;;;;AAOA,UAAM,SAAN,GAAkB,YAAM;AACpB,eAAO,MAAP;AACH,KAFD;;;;;;;AASA,UAAM,eAAN,GAAwB,YAAM;AAC1B,eAAO,YAAP;AACH,KAFD;;;;;;;;;AAWA,UAAM,EAAN,GAAW,UAAC,SAAD,EAAY,QAAZ,EAAyB;AAChC,qBAAa,EAAb,CAAgB,SAAhB,EAA2B,QAA3B;AACH,KAFD;;;;;;;;AAUA,UAAM,UAAN,GAAmB,UAAC,OAAD,EAAa;AAC5B,YAAM,OAAO,oBAAK,KAAL,EAAY,OAAZ,CAAb;AACA,YAAM,SAAS,CACX,UADW,EAEX,aAFW,EAGX,cAHW,EAIX,eAJW,EAKX,YALW,EAMX,cANW,EAOX,SAPW,EAQX,YARW,EASX,WATW,EAUX,UAVW,EAWX,SAXW,CAAf;;;AAeA,eAAO,OAAP,CAAe,UAAC,SAAD,EAAe;AAC1B,iBAAK,EAAL,CAAQ,SAAR,EAAmB,UAAC,IAAD,EAAU;AACzB,6BAAa,OAAb,CAAqB,SAArB,EAAgC,IAAhC;AACH,aAFD;AAGH,SAJD;;AAMA,cAAM,IAAN,CAAW;AACP,4BADO;AAEP;AAFO,SAAX;;AAKA,eAAO,IAAP;AACH,KA7BD;;;;;;;;AAqCA,UAAM,OAAN,GAAgB,UAAC,OAAD,EAAa;AACzB,YAAM,QAAQ,oBAAO,KAAP,EAAc;AACxB;AADwB,SAAd,CAAd;;AAIA,YAAI,KAAJ,EAAW;AACP,mBAAO,MAAM,IAAb;AACH;;AAED,eAAO,IAAP;AACH,KAVD;;;;;;;;AAkBA,UAAM,WAAN,GAAoB,UAAC,IAAD,EAAU;AAC1B,eAAO,sBAAS,KAAT,EAAgB;AACnB;AADmB,SAAhB,CAAP;AAGH,KAJD;;AAMA,WAAO,KAAP;AACH,CAjHD;;kBAmHe,K","file":"stack.js","sourcesContent":["import _ from 'lodash';\nimport Sister from 'sister';\nimport rebound from 'rebound';\nimport Card from './card';\n\n/**\n * @param {Object} config Stack configuration.\n * @return {Object} An instance of Stack object.\n */\nconst Stack = (config) => {\n    let construct,\n        eventEmitter,\n        index,\n        springSystem,\n        stack;\n\n    construct = () => {\n        stack = {};\n        springSystem = new rebound.SpringSystem();\n        eventEmitter = Sister();\n        index = [];\n    };\n\n    construct();\n\n    /**\n     * Get the configuration object.\n     *\n     * @return {Object}\n     */\n    stack.getConfig = () => {\n        return config;\n    };\n\n    /**\n     * Get a singleton instance of the SpringSystem physics engine.\n     *\n     * @return {Sister}\n     */\n    stack.getSpringSystem = () => {\n        return springSystem;\n    };\n\n    /**\n     * Proxy to the instance of the event emitter.\n     *\n     * @param {String} eventName\n     * @param {String} listener\n     * @return {undefined}\n     */\n    stack.on = (eventName, listener) => {\n        eventEmitter.on(eventName, listener);\n    };\n\n    /**\n     * Creates an instance of Card and associates it with an element.\n     *\n     * @param {HTMLElement} element\n     * @return {Card}\n     */\n    stack.createCard = (element) => {\n        const card = Card(stack, element);\n        const events = [\n            'throwout',\n            'throwoutend',\n            'throwoutleft',\n            'throwoutright',\n            'throwoutup',\n            'throwoutdown',\n            'throwin',\n            'throwinend',\n            'dragstart',\n            'dragmove',\n            'dragend'\n        ];\n\n        // Proxy Card events to the Stack.\n        events.forEach((eventName) => {\n            card.on(eventName, (data) => {\n                eventEmitter.trigger(eventName, data);\n            });\n        });\n\n        index.push({\n            element,\n            card\n        });\n\n        return card;\n    };\n\n    /**\n     * Returns an instance of Card associated with an element.\n     *\n     * @param {HTMLElement} element\n     * @return {Card|null}\n     */\n    stack.getCard = (element) => {\n        const group = _.find(index, {\n            element\n        });\n\n        if (group) {\n            return group.card;\n        }\n\n        return null;\n    };\n\n    /**\n     * Remove an instance of Card from the stack index.\n     *\n     * @param {Card} card\n     * @return {null}\n     */\n    stack.destroyCard = (card) => {\n        return _.remove(index, {\n            card\n        });\n    };\n\n    return stack;\n};\n\nexport default Stack;\n"]}