{"version":3,"sources":["stack.js"],"names":[],"mappings":";;;;;;;;sBAAmB,QAAQ;;;;uBACP,SAAS;;;;oBACZ,QAAQ;;;;oBACR,QAAQ;;;;AAEzB,IAAI,KAAK,YAAA,CAAC;;;;;;AAMV,KAAK,GAAG,UAAC,MAAM,EAAK;AAChB,QAAI,SAAS,YAAA;QACT,YAAY,YAAA;QACZ,KAAK,YAAA;QACL,YAAY,YAAA;QACZ,KAAK,YAAA,CAAC;;AAEV,aAAS,GAAG,YAAM;AACd,aAAK,GAAG,EAAE,CAAC;AACX,oBAAY,GAAG,IAAI,qBAAQ,YAAY,EAAE,CAAC;AAC1C,oBAAY,GAAG,0BAAQ,CAAC;AACxB,aAAK,GAAG,EAAE,CAAC;KACd,CAAC;;AAEF,aAAS,EAAE,CAAC;;;;;;;AAOZ,SAAK,CAAC,SAAS,GAAG;eAAM,MAAM;KAAA,CAAC;;;;;;;AAO/B,SAAK,CAAC,eAAe,GAAG;eAAM,YAAY;KAAA,CAAC;;;;;;;;;AAS3C,SAAK,CAAC,EAAE,GAAG,UAAC,SAAS,EAAE,QAAQ,EAAK;AAChC,oBAAY,CAAC,EAAE,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;KACxC,CAAC;;;;;;;;AAQF,SAAK,CAAC,UAAU,GAAG,UAAC,OAAO,EAAK;AAC5B,YAAI,IAAI,YAAA;YACJ,MAAM,YAAA,CAAC;;AAEX,YAAI,GAAG,uBAAK,KAAK,EAAE,OAAO,CAAC,CAAC;;AAE5B,cAAM,GAAG,CACL,UAAU,EACV,aAAa,EACb,cAAc,EACd,eAAe,EACf,SAAS,EACT,YAAY,EACZ,WAAW,EACX,UAAU,EACV,SAAS,CACZ,CAAC;;;AAGF,cAAM,CAAC,OAAO,CAAC,UAAC,SAAS,EAAK;AAC1B,gBAAI,CAAC,EAAE,CAAC,SAAS,EAAE,UAAC,IAAI,EAAK;AACzB,4BAAY,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;aACzC,CAAC,CAAC;SACN,CAAC,CAAC;;AAEH,aAAK,CAAC,IAAI,CAAC;AACP,mBAAO,EAAP,OAAO;AACP,gBAAI,EAAJ,IAAI;SACP,CAAC,CAAC;;AAEH,eAAO,IAAI,CAAC;KACf,CAAC;;;;;;;;AAQF,SAAK,CAAC,OAAO,GAAG,UAAC,OAAO,EAAK;AACzB,YAAI,IAAI,YAAA,CAAC;;AAET,YAAI,GAAG,kBAAK,IAAI,CAAC,KAAK,EAAE;AACpB,mBAAO,EAAP,OAAO;SACV,CAAC,CAAC;;AAEH,YAAI,IAAI,EAAE;AACN,mBAAO,IAAI,CAAC,IAAI,CAAC;SACpB;;AAED,eAAO,IAAI,CAAC;KACf,CAAC;;;;;;;;AAQF,SAAK,CAAC,WAAW,GAAG,UAAC,IAAI,EAAK;AAC1B,eAAO,kBAAK,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;KACnC,CAAC;;AAEF,WAAO,KAAK,CAAC;CAChB,CAAC;;qBAEa,KAAK","file":"stack.js","sourcesContent":["import Sister from 'sister';\r\nimport rebound from 'rebound';\r\nimport Card from './card';\r\nimport util from './util';\r\n\r\nlet Stack;\r\n\r\n/**\r\n * @param {Object} config Stack configuration.\r\n * @return {Object} An instance of Stack object.\r\n */\r\nStack = (config) => {\r\n    let construct,\r\n        eventEmitter,\r\n        index,\r\n        springSystem,\r\n        stack;\r\n\r\n    construct = () => {\r\n        stack = {};\r\n        springSystem = new rebound.SpringSystem();\r\n        eventEmitter = Sister();\r\n        index = [];\r\n    };\r\n\r\n    construct();\r\n\r\n    /**\r\n     * Get the configuration object.\r\n     *\r\n     * @return {Object}\r\n     */\r\n    stack.getConfig = () => config;\r\n\r\n    /**\r\n     * Get a singleton instance of the SpringSystem physics engine.\r\n     *\r\n     * @return {Sister}\r\n     */\r\n    stack.getSpringSystem = () => springSystem;\r\n\r\n    /**\r\n     * Proxy to the instance of the event emitter.\r\n     *\r\n     * @param {String} eventName\r\n     * @param {String} listener\r\n     * @return {undefined}\r\n     */\r\n    stack.on = (eventName, listener) => {\r\n        eventEmitter.on(eventName, listener);\r\n    };\r\n\r\n    /**\r\n     * Creates an instance of Card and associates it with an element.\r\n     *\r\n     * @param {HTMLElement} element\r\n     * @return {Card}\r\n     */\r\n    stack.createCard = (element) => {\r\n        let card,\r\n            events;\r\n\r\n        card = Card(stack, element);\r\n\r\n        events = [\r\n            'throwout',\r\n            'throwoutend',\r\n            'throwoutleft',\r\n            'throwoutright',\r\n            'throwin',\r\n            'throwinend',\r\n            'dragstart',\r\n            'dragmove',\r\n            'dragend'\r\n        ];\r\n\r\n        // Proxy Card events to the Stack.\r\n        events.forEach((eventName) => {\r\n            card.on(eventName, (data) => {\r\n                eventEmitter.trigger(eventName, data);\r\n            });\r\n        });\r\n\r\n        index.push({\r\n            element,\r\n            card\r\n        });\r\n\r\n        return card;\r\n    };\r\n\r\n    /**\r\n     * Returns an instance of Card associated with an element.\r\n     *\r\n     * @param {HTMLElement} element\r\n     * @return {Card|null}\r\n     */\r\n    stack.getCard = (element) => {\r\n        let card;\r\n\r\n        card = util.find(index, {\r\n            element\r\n        });\r\n\r\n        if (card) {\r\n            return card.card;\r\n        }\r\n\r\n        return null;\r\n    };\r\n\r\n    /**\r\n     * Remove an instance of Card from the stack index.\r\n     *\r\n     * @param {Card} card\r\n     * @return {Card}\r\n     */\r\n    stack.destroyCard = (card) => {\r\n        return util.remove(index, card);\r\n    };\r\n\r\n    return stack;\r\n};\r\n\r\nexport default Stack;\r\n"],"sourceRoot":"/source/"}